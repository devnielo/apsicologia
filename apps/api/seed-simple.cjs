const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const fs = require('fs');
const path = require('path');

// Define clinical constants directly in seed script for CommonJS compatibility
const MEDICAL_CONDITIONS = [
  'Hipertensi√≥n arterial', 'Diabetes mellitus tipo 2', 'Asma bronquial', 'Artritis reumatoide',
  'Osteoporosis', 'Fibromialgia', 'Migra√±a cr√≥nica', 'S√≠ndrome del intestino irritable',
  'Apnea del sue√±o', 'Reflujo gastroesof√°gico', 'Hipotiroidismo', 'Colesterol alto',
  'Enfermedad cardiovascular', 'Obesidad', 'S√≠ndrome metab√≥lico'
];

const ALLERGIES = [
  'Polen de gram√≠neas', '√Åcaros del polvo', 'Pelo de animales', 'Frutos secos',
  'Mariscos', 'Penicilina', 'Aspirina', 'L√°tex', 'N√≠quel', 'Perfumes',
  'Alimentos con gluten', 'Lactosa', 'Huevos', 'Soja'
];

const MEDICATIONS = [
  'Paracetamol', 'Ibuprofeno', 'Omeprazol', 'Simvastatina', 'Metformina',
  'Enalapril', 'Amlodipino', 'Levotiroxina', 'Sertralina', 'Lorazepam',
  'Diazepam', 'Alprazolam', 'Escitalopram', 'Venlafaxina', 'Quetiapina'
];

const SURGERIES = [
  'Apendicectom√≠a', 'Colecistectom√≠a', 'Hernia inguinal', 'Ces√°rea',
  'Artroscopia de rodilla', 'Cataratas', 'Amigdalectom√≠a', 'Herniorrafia',
  'Colectom√≠a', 'Mastectom√≠a', 'Prostatectom√≠a', 'Histerectom√≠a'
];

const MENTAL_HEALTH_DIAGNOSES = [
  'Trastorno de ansiedad generalizada', 'Episodio depresivo mayor', 'Trastorno de p√°nico',
  'Fobia social', 'Trastorno obsesivo-compulsivo', 'Trastorno de estr√©s postraum√°tico',
  'Trastorno bipolar', 'Trastorno l√≠mite de personalidad', 'Trastorno de la alimentaci√≥n',
  'Trastorno por d√©ficit de atenci√≥n', 'Trastorno del espectro autista', 'Esquizofrenia',
  'Trastorno de adaptaci√≥n', 'Trastorno de ansiedad por separaci√≥n'
];

const MENTAL_HEALTH_TREATMENTS = [
  'Terapia cognitivo-conductual', 'Terapia psicodin√°mica', 'Terapia human√≠stica',
  'Terapia sist√©mica familiar', 'Terapia de grupo', 'Mindfulness y meditaci√≥n',
  'EMDR', 'Terapia dial√©ctica conductual', 'Terapia de aceptaci√≥n y compromiso',
  'Psicoeducaci√≥n', 'Terapia ocupacional', 'Arteterapia', 'Musicoterapia'
];

const MENTAL_HEALTH_STATUS = {
  active: 'active',
  stable: 'stable', 
  improving: 'improving',
  critical: 'critical'
};

const MENTAL_HEALTH_SEVERITY = {
  mild: 'mild',
  moderate: 'moderate',
  severe: 'severe'
};

// Read the full base64 image from file
const profileImagePath = path.join(__dirname, '../../profile-avatar-base64.txt');
const profileImageBase64 = fs.readFileSync(profileImagePath, 'utf8').trim();

// Simple connection
const MONGODB_URI = 'mongodb://admin:password123@localhost:27017/apsicologia?authSource=admin';

// Import actual models for Professional to ensure proper schema validation
// Use dynamic import for ES modules and fallback to simple schemas for others
let Professional, Room;

// Simple schemas for most models
const userSchema = new mongoose.Schema({}, { strict: false });
const patientSchema = new mongoose.Schema({}, { strict: false });
const serviceSchema = new mongoose.Schema({}, { strict: false });
const appointmentSchema = new mongoose.Schema({}, { strict: false });
const fileSchema = new mongoose.Schema({}, { strict: false });

const User = mongoose.model('User', userSchema);
const Patient = mongoose.model('Patient', patientSchema);
const Service = mongoose.model('Service', serviceSchema);
const Appointment = mongoose.model('Appointment', appointmentSchema);
const File = mongoose.model('File', fileSchema);

// We'll import Professional and Room models dynamically in the seedData function

// Helper function to get random items from an array
function getRandomItems(array, count) {
  if (count === 0) return [];
  const shuffled = [...array].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, Math.min(count, array.length));
}

async function seedData() {
  try {
    console.log('üîå Connecting to MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');

    // Import Professional and Room models dynamically
    try {
      const professionalModule = await import('./src/models/Professional.js');
      const roomModule = await import('./src/models/Room.js');
      Professional = professionalModule.Professional;
      Room = roomModule.Room;
      console.log('‚úÖ Imported Professional and Room models');
    } catch (error) {
      console.log('‚ö†Ô∏è Could not import ES modules, using fallback schemas');
      // Fallback to simple schemas if import fails
      const professionalSchema = new mongoose.Schema({}, { strict: false });
      const roomSchema = new mongoose.Schema({}, { strict: false });
      Professional = mongoose.model('Professional', professionalSchema);
      Room = mongoose.model('Room', roomSchema);
    }

    // First check and update admin user before clearing data
    let adminUser = await User.findOne({ email: 'admin@arribapsicologia.com' });
    if (adminUser) {
      console.log('üîÑ Updating existing admin user with profile image...');
      adminUser.profileImage = profileImageBase64;
      adminUser.updatedAt = new Date();
      await adminUser.save();
      console.log('‚úÖ Updated admin user with profile image: Administrador Principal');
    }

    // Clear existing data (except admin user)
    await Appointment.deleteMany({});
    await Professional.deleteMany({});
    await Patient.deleteMany({});
    await Service.deleteMany({});
    await Room.deleteMany({});
    await File.deleteMany({});
    await User.deleteMany({ email: { $ne: 'admin@arribapsicologia.com' } }); // Don't delete admin
    console.log('üóëÔ∏è Cleared existing seed data (preserved admin user)');

    // Create admin user if it doesn't exist
    adminUser = await User.findOne({ email: 'admin@arribapsicologia.com' });
    if (!adminUser) {
      const hashedAdminPassword = await bcrypt.hash('SecureAdmin2024!', 12);
      adminUser = new User({
        email: 'admin@arribapsicologia.com',
        passwordHash: hashedAdminPassword,
        name: 'Administrador Principal',
        phone: '+34600000000',
        role: 'admin',
        profileImage: profileImageBase64,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      await adminUser.save();
      console.log('‚úÖ Created admin user: Administrador Principal');
    }
    
    // Drop indexes that might cause conflicts
    try {
      await Patient.collection.dropIndex('episodeId_1');
      console.log('üóëÔ∏è Dropped episodeId_1 index');
    } catch (error) {
      console.log('‚ÑπÔ∏è Index episodeId_1 does not exist or already dropped');
    }

    // Create reception user for admin access
    let receptionUser = await User.findOne({ email: 'recepcion@arribapsicologia.com' });
    if (!receptionUser) {
      const hashedReceptionPassword = await bcrypt.hash('Reception2024!', 12);
      receptionUser = new User({
        email: 'recepcion@arribapsicologia.com',
        passwordHash: hashedReceptionPassword,
        name: 'Recepci√≥n Principal',
        phone: '+34600000001',
        role: 'reception',
        profileImage: profileImageBase64,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      await receptionUser.save();
      console.log('‚úÖ Created reception user: Recepci√≥n Principal');
    }

    // Create professional 1
    let user1 = await User.findOne({ email: 'maria.garcia@arribapsicologia.com' });
    if (!user1) {
      const hashedPassword1 = await bcrypt.hash('Professional2024!', 12);
      user1 = new User({
        email: 'maria.garcia@arribapsicologia.com',
        passwordHash: hashedPassword1,
        name: 'Dr. Mar√≠a Garc√≠a L√≥pez',
        phone: '+34 666 111 222',
        role: 'professional',
        profileImage: profileImageBase64,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      await user1.save();
      console.log('‚úÖ Created user: Dr. Mar√≠a Garc√≠a L√≥pez');
    } else {
      console.log('‚ÑπÔ∏è User already exists: Dr. Mar√≠a Garc√≠a L√≥pez');
    }

    let professional1 = await Professional.findOne({ userId: user1._id });
     if (!professional1) {
       professional1 = new Professional({
         userId: user1._id,
         name: 'Dr. Mar√≠a Garc√≠a L√≥pez',
         email: 'maria.garcia@arribapsicologia.com',
         phone: '+34 666 111 222',
         licenseNumber: 'PSI-2015-001',
         specialties: ['Terapia Cognitivo-Conductual', 'Trastornos de Ansiedad', 'Depresi√≥n'],
         bio: 'Doctora en Psicolog√≠a Cl√≠nica con 8 a√±os de experiencia',
         title: 'Psic√≥loga',
         yearsOfExperience: 8,
         services: [], // Will be updated after services are created
         defaultServiceDuration: 60,
         weeklyAvailability: [
          { dayOfWeek: 1, startTime: '09:00', endTime: '17:00', isAvailable: true },
          { dayOfWeek: 2, startTime: '09:00', endTime: '17:00', isAvailable: true },
          { dayOfWeek: 3, startTime: '09:00', endTime: '17:00', isAvailable: true },
          { dayOfWeek: 4, startTime: '09:00', endTime: '17:00', isAvailable: true },
          { dayOfWeek: 5, startTime: '09:00', endTime: '17:00', isAvailable: true }
        ],
         vacations: [],
         breaks: [],
         timezone: 'Europe/Madrid',
         bufferMinutes: 15,
         telehealthEnabled: true,
         isActive: true,
         status: 'active',
         isAcceptingNewPatients: true,
         color: '#3B82F6',
         languages: ['es'],
         currency: 'EUR',
         acceptsOnlinePayments: true,
         paymentMethods: ['cash', 'card'],
         totalReviews: 0,
         totalAppointments: 0,
         completionRate: 0,
         stats: {
           totalPatients: 0,
           activePatients: 0,
           totalAppointments: 0,
           completedAppointments: 0,
           cancelledAppointments: 0,
           noShowAppointments: 0,
           averageRating: 0,
           totalReviews: 0,
           completionRate: 0
         },
         createdAt: new Date(),
         updatedAt: new Date()
       });
       await professional1.save();
       console.log('‚úÖ Created professional: Dr. Mar√≠a Garc√≠a L√≥pez');
     } else {
       console.log('‚ÑπÔ∏è Professional already exists: Dr. Mar√≠a Garc√≠a L√≥pez');
     }
     user1.professionalId = professional1._id;
     await user1.save();

    // Create professional 2
    let user2 = await User.findOne({ email: 'carlos.rodriguez@arribapsicologia.com' });
    if (!user2) {
      const hashedPassword2 = await bcrypt.hash('Professional2024!', 12);
      user2 = new User({
        email: 'carlos.rodriguez@arribapsicologia.com',
        passwordHash: hashedPassword2,
        name: 'Dr. Carlos Rodr√≠guez Mart√≠n',
        phone: '+34 666 333 444',
        role: 'professional',
        profileImage: profileImageBase64,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      await user2.save();
      console.log('‚úÖ Created user: Dr. Carlos Rodr√≠guez Mart√≠n');
    } else {
      console.log('‚ÑπÔ∏è User already exists: Dr. Carlos Rodr√≠guez Mart√≠n');
    }

    let professional2 = await Professional.findOne({ userId: user2._id });
     if (!professional2) {
       professional2 = new Professional({
         userId: user2._id,
         name: 'Dr. Carlos Rodr√≠guez Mart√≠n',
         email: 'carlos.rodriguez@arribapsicologia.com',
         phone: '+34 666 333 444',
         licenseNumber: 'PSI-2018-002',
         specialties: ['Psicolog√≠a Infantil', 'Terapia Familiar', 'TDAH'],
         bio: 'Doctor en Psicolog√≠a con 12 a√±os de experiencia especializado en terapia infantil y familiar',
         title: 'Psic√≥logo',
         yearsOfExperience: 12,
         services: [], // Will be updated after services are created
         defaultServiceDuration: 60,
         weeklyAvailability: [
          { dayOfWeek: 1, startTime: '10:00', endTime: '18:00', isAvailable: true },
          { dayOfWeek: 2, startTime: '10:00', endTime: '18:00', isAvailable: true },
          { dayOfWeek: 3, startTime: '10:00', endTime: '18:00', isAvailable: true },
          { dayOfWeek: 4, startTime: '10:00', endTime: '18:00', isAvailable: true },
          { dayOfWeek: 5, startTime: '10:00', endTime: '16:00', isAvailable: true }
        ],
         vacations: [],
         breaks: [],
         timezone: 'Europe/Madrid',
         bufferMinutes: 10,
         telehealthEnabled: true,
         isActive: true,
         status: 'active',
         isAcceptingNewPatients: true,
         color: '#10B981',
         languages: ['es'],
         currency: 'EUR',
         acceptsOnlinePayments: true,
         paymentMethods: ['cash', 'card', 'transfer'],
         totalReviews: 0,
         totalAppointments: 0,
         completionRate: 0,
         stats: {
           totalPatients: 0,
           activePatients: 0,
           totalAppointments: 0,
           completedAppointments: 0,
           cancelledAppointments: 0,
           noShowAppointments: 0,
           averageRating: 0,
           totalReviews: 0,
           completionRate: 0
         },
         createdAt: new Date(),
         updatedAt: new Date()
       });
       await professional2.save();
       console.log('‚úÖ Created professional: Dr. Carlos Rodr√≠guez Mart√≠n');
     } else {
       console.log('‚ÑπÔ∏è Professional already exists: Dr. Carlos Rodr√≠guez Mart√≠n');
     }
     user2.professionalId = professional2._id;
     await user2.save();

    // Create patient users
    let patientUser1 = await User.findOne({ email: 'ana.martinez@email.com' });
    if (!patientUser1) {
      const hashedPatientPassword1 = await bcrypt.hash('Patient2024!', 12);
      patientUser1 = new User({
        email: 'ana.martinez@email.com',
        passwordHash: hashedPatientPassword1,
        name: 'Ana Mart√≠nez Garc√≠a',
        phone: '+34 666 555 777',
        role: 'patient',
        profileImage: profileImageBase64,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      await patientUser1.save();
      console.log('‚úÖ Created patient user: Ana Mart√≠nez Garc√≠a');
    } else {
      console.log('‚ÑπÔ∏è Patient user already exists: Ana Mart√≠nez Garc√≠a');
    }

    let patientUser2 = await User.findOne({ email: 'miguel.fernandez@email.com' });
    if (!patientUser2) {
      const hashedPatientPassword2 = await bcrypt.hash('Patient2024!', 12);
      patientUser2 = new User({
        email: 'miguel.fernandez@email.com',
        passwordHash: hashedPatientPassword2,
        name: 'Miguel Fern√°ndez L√≥pez',
        phone: '+34 666 888 999',
        role: 'patient',
        profileImage: profileImageBase64,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      await patientUser2.save();
      console.log('‚úÖ Created patient user: Miguel Fern√°ndez L√≥pez');
    } else {
      console.log('‚ÑπÔ∏è Patient user already exists: Miguel Fern√°ndez L√≥pez');
    }

    // Create services - Complete structure matching Service.ts model
    const services = [
      {
        name: 'Terapia Online',
        description: 'Sesi√≥n de terapia psicol√≥gica mediante videollamada. Realizamos sesiones virtuales con la misma calidad y profesionalismo que las presenciales.',
        durationMinutes: 55,
        price: 70,
        currency: 'EUR',
        color: '#3B82F6',
        category: 'Terapia Individual',
        tags: ['online', 'videollamada', 'virtual', 'terapia-individual'],
        isActive: true,
        isOnlineAvailable: true,
        requiresApproval: false,
        availableTo: [], // Available to all professionals
        isPubliclyBookable: true,
        priceDetails: {
          basePrice: 70,
          discountedPrice: 65, // 5‚Ç¨ discount for online sessions
          discounts: [
            {
              name: 'Primera sesi√≥n',
              percentage: 20,
              validFrom: new Date('2024-01-01'),
              validUntil: new Date('2024-12-31')
            },
            {
              name: 'Estudiantes',
              percentage: 15,
              validFrom: new Date('2024-01-01'),
              validUntil: new Date('2024-12-31')
            }
          ]
        },
        settings: {
          maxAdvanceBookingDays: 90,
          minAdvanceBookingHours: 2,
          allowSameDayBooking: true,
          bufferBefore: 5,
          bufferAfter: 5,
          maxConcurrentBookings: 1,
          requiresIntake: false,
          intakeFormId: null
        },
        preparation: {
          instructions: 'Aseg√∫rese de tener una conexi√≥n estable a internet, un espacio privado y tranquilo, y la aplicaci√≥n de videollamada instalada.',
          requiredDocuments: [],
          recommendedDuration: 15 // 15 minutes before appointment
        },
        followUp: {
          instructions: 'Se enviar√° un resumen de la sesi√≥n y ejercicios recomendados por email en las pr√≥ximas 24 horas.',
          scheduledTasks: ['Enviar resumen de sesi√≥n', 'Programar ejercicios de seguimiento'],
          recommendedGap: 7 // 1 week until next appointment
        },
        stats: {
          totalBookings: 0,
          completedBookings: 0,
          cancelledBookings: 0,
          averageRating: null,
          totalRevenue: 0
        },
        deletedAt: null,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Terapia Presencial - Alicante',
        description: 'Sesi√≥n de terapia psicol√≥gica en consulta f√≠sica en Alicante. Atenci√≥n personalizada en un entorno profesional y confidencial.',
        durationMinutes: 55,
        price: 80,
        currency: 'EUR',
        color: '#10B981',
        category: 'Terapia Individual',
        tags: ['presencial', 'consulta', 'alicante', 'fisica', 'terapia-individual'],
        isActive: true,
        isOnlineAvailable: false,
        requiresApproval: true,
        availableTo: [],
        isPubliclyBookable: false,
        priceDetails: {
          basePrice: 80,
          discountedPrice: null,
          discounts: [
            {
              name: 'Paquete 4 sesiones',
              percentage: 10,
              validFrom: new Date('2024-01-01'),
              validUntil: new Date('2024-12-31')
            },
            {
              name: 'Paquete 8 sesiones',
              percentage: 15,
              validFrom: new Date('2024-01-01'),
              validUntil: new Date('2024-12-31')
            }
          ]
        },
        settings: {
          maxAdvanceBookingDays: 60,
          minAdvanceBookingHours: 24,
          allowSameDayBooking: false,
          bufferBefore: 10,
          bufferAfter: 10,
          maxConcurrentBookings: 1,
          requiresIntake: true,
          intakeFormId: null // Will be set when intake forms are created
        },
        preparation: {
          instructions: 'Llegue 10 minutos antes de su cita. Traiga su documento de identidad y cualquier informe m√©dico relevante si es su primera visita.',
          requiredDocuments: ['DNI/NIE', 'Tarjeta sanitaria'],
          recommendedDuration: 30 // 30 minutes before appointment
        },
        followUp: {
          instructions: 'Se programar√° la siguiente cita al finalizar la sesi√≥n. Recibir√° recordatorios 48h y 24h antes de cada cita.',
          scheduledTasks: ['Programar siguiente cita', 'Enviar recordatorios', 'Actualizar historial cl√≠nico'],
          recommendedGap: 14 // 2 weeks until next appointment
        },
        stats: {
          totalBookings: 0,
          completedBookings: 0,
          cancelledBookings: 0,
          averageRating: null,
          totalRevenue: 0
        },
        deletedAt: null,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Terapia de Pareja',
        description: 'Sesi√≥n especializada en terapia de pareja para mejorar la comunicaci√≥n y resolver conflictos relacionales.',
        durationMinutes: 75,
        price: 120,
        currency: 'EUR',
        color: '#F59E0B',
        category: 'Terapia de Pareja',
        tags: ['pareja', 'relaciones', 'comunicacion', 'conflictos'],
        isActive: true,
        isOnlineAvailable: true,
        requiresApproval: true,
        availableTo: [], // Available to all professionals
        isPubliclyBookable: true,
        priceDetails: {
          basePrice: 120,
          discountedPrice: null,
          discounts: [
            {
              name: 'Paquete 6 sesiones',
              percentage: 12,
              validFrom: new Date('2024-01-01'),
              validUntil: new Date('2024-12-31')
            }
          ]
        },
        settings: {
          maxAdvanceBookingDays: 45,
          minAdvanceBookingHours: 48,
          allowSameDayBooking: false,
          bufferBefore: 15,
          bufferAfter: 15,
          maxConcurrentBookings: 1,
          requiresIntake: true,
          intakeFormId: null
        },
        preparation: {
          instructions: 'Ambos miembros de la pareja deben completar el cuestionario de evaluaci√≥n inicial por separado antes de la primera sesi√≥n.',
          requiredDocuments: ['Cuestionario de evaluaci√≥n relacional'],
          recommendedDuration: 45 // 45 minutes before appointment
        },
        followUp: {
          instructions: 'Se asignar√°n ejercicios espec√≠ficos para trabajar en casa entre sesiones. Seguimiento mediante comunicaci√≥n escrita si es necesario.',
          scheduledTasks: ['Asignar ejercicios para casa', 'Programar seguimiento', 'Evaluar progreso'],
          recommendedGap: 10 // 10 days until next appointment
        },
        stats: {
          totalBookings: 0,
          completedBookings: 0,
          cancelledBookings: 0,
          averageRating: null,
          totalRevenue: 0
        },
        deletedAt: null,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Evaluaci√≥n Psicol√≥gica',
        description: 'Evaluaci√≥n psicol√≥gica completa con aplicaci√≥n de tests y elaboraci√≥n de informe detallado.',
        durationMinutes: 90,
        price: 150,
        currency: 'EUR',
        color: '#8B5CF6',
        category: 'Evaluaci√≥n',
        tags: ['evaluacion', 'tests', 'informe', 'diagnostico'],
        isActive: true,
        isOnlineAvailable: false,
        requiresApproval: true,
        availableTo: [],
        isPubliclyBookable: false,
        priceDetails: {
          basePrice: 150,
          discountedPrice: null,
          discounts: []
        },
        settings: {
          maxAdvanceBookingDays: 30,
          minAdvanceBookingHours: 72,
          allowSameDayBooking: false,
          bufferBefore: 20,
          bufferAfter: 30,
          maxConcurrentBookings: 1,
          requiresIntake: true,
          intakeFormId: null
        },
        preparation: {
          instructions: 'Traiga toda la documentaci√≥n m√©dica y psicol√≥gica previa. Descanse bien la noche anterior y evite alcohol o sustancias que puedan afectar el rendimiento.',
          requiredDocuments: ['Informes m√©dicos previos', 'Informes psicol√≥gicos anteriores', 'Lista de medicamentos actuales'],
          recommendedDuration: 60 // 1 hour before appointment
        },
        followUp: {
          instructions: 'El informe estar√° disponible en 7-10 d√≠as laborables. Se programar√° una sesi√≥n de devoluci√≥n para explicar los resultados.',
          scheduledTasks: ['Elaborar informe', 'Programar sesi√≥n de devoluci√≥n', 'Enviar informe'],
          recommendedGap: 10 // 10 days for report delivery session
        },
        stats: {
          totalBookings: 0,
          completedBookings: 0,
          cancelledBookings: 0,
          averageRating: null,
          totalRevenue: 0
        },
        deletedAt: null,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];

    const createdServices = [];
    for (const serviceData of services) {
      const service = new Service(serviceData);
      await service.save();
      createdServices.push(service);
      console.log(`üíº Created service: ${service.name} (${service.price}${service.currency}, ${service.durationMinutes}min)`);
    }

    // Create rooms
    const rooms = [
      {
        name: 'Consulta 1',
        description: 'Sala principal para consultas individuales',
        type: 'physical',
        capacity: 3,
        isActive: true,
        location: {
          building: 'Edificio Principal',
          floor: 1,
          roomNumber: '101'
        }
      },
      {
        name: 'Consulta 2',
        description: 'Sala adaptada para terapia infantil',
        type: 'physical',
        capacity: 4,
        isActive: true,
        location: {
          building: 'Edificio Principal',
          floor: 1,
          roomNumber: '102'
        }
      },
      {
        name: 'Sala Virtual Principal',
        description: 'Sala virtual para videoconsultas',
        type: 'virtual',
        capacity: 10,
        isActive: true,
        virtualConfig: {
          platform: 'jitsi',
          roomId: 'sala-virtual-principal',
          requiresPassword: true
        }
      }
    ];

    const createdRooms = [];
    for (const roomData of rooms) {
      const room = new Room(roomData);
      await room.save();
      createdRooms.push(room);
      console.log(`üè¢ Created room: ${room.name}`);
    }

    // Assign services and rooms to professionals after they are created
    console.log('\nüìã Assigning services and rooms to professionals...');
    
    // Assign both services and rooms to professional1 (Mar√≠a Garc√≠a)
    professional1.services = createdServices.map(service => service._id);
    professional1.assignedRooms = [createdRooms[0]._id, createdRooms[2]._id]; // Consulta 1 + Sala Virtual
    professional1.defaultRoom = createdRooms[0]._id; // Consulta 1 as default
    await professional1.save();
    console.log(`‚úÖ Assigned ${createdServices.length} services and ${professional1.assignedRooms.length} rooms to ${professional1.name}`);

    // Assign both services and rooms to professional2 (Carlos Rodr√≠guez) 
    professional2.services = createdServices.map(service => service._id);
    professional2.assignedRooms = [createdRooms[1]._id, createdRooms[2]._id]; // Consulta 2 + Sala Virtual
    professional2.defaultRoom = createdRooms[1]._id; // Consulta 2 as default
    await professional2.save();
    console.log(`‚úÖ Assigned ${createdServices.length} services and ${professional2.assignedRooms.length} rooms to ${professional2.name}`);

    // Crear 3 profesionales adicionales primero
    const professionalNames = [
      { firstName: 'Elena', lastName: 'Navarro Ruiz', title: 'Psic√≥loga', specialties: ['Terapia de Pareja', 'Sexolog√≠a', 'Mediaci√≥n Familiar'], experience: 15 },
      { firstName: 'Roberto', lastName: 'Morales Vega', title: 'Psic√≥logo', specialties: ['Neuropsicolog√≠a', 'Rehabilitaci√≥n Cognitiva', 'Demencias'], experience: 10 },
      { firstName: 'Carmen', lastName: 'Jim√©nez Soto', title: 'Psic√≥loga', specialties: ['Psicolog√≠a Forense', 'Evaluaci√≥n Pericial', 'Victimolog√≠a'], experience: 18 },
    ];

    const additionalProfessionals = [];
    for (let i = 0; i < professionalNames.length; i++) {
      const prof = professionalNames[i];
      const email = `${prof.firstName.toLowerCase()}.${prof.lastName.split(' ')[0].toLowerCase()}@arribapsicologia.com`;
      const hashedPassword = await bcrypt.hash('Professional2024!', 12);
      
      const profUser = new User({
        email: email,
        passwordHash: hashedPassword,
        name: `${prof.title} ${prof.firstName} ${prof.lastName}`,
        phone: `+34 6${String(Math.floor(Math.random() * 100000000)).padStart(8, '0')}`,
        role: 'professional',
        profileImage: profileImageBase64,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      await profUser.save();
      console.log(`‚úÖ Created user: ${prof.title} ${prof.firstName} ${prof.lastName}`);

      const professional = new Professional({
        userId: profUser._id,
        name: `${prof.title} ${prof.firstName} ${prof.lastName}`,
        email: email,
        phone: profUser.phone,
        licenseNumber: `PSI-${2020 + i}-00${3 + i}`,
        specialties: prof.specialties,
        bio: `${prof.title} con ${prof.experience} a√±os de experiencia`,
        title: prof.title,
        yearsOfExperience: prof.experience,
        services: createdServices.map(service => service._id),
        defaultServiceDuration: 60,
        weeklyAvailability: [
          { dayOfWeek: 1, startTime: '09:00', endTime: '17:00', isAvailable: true },
          { dayOfWeek: 2, startTime: '09:00', endTime: '17:00', isAvailable: true },
          { dayOfWeek: 3, startTime: '09:00', endTime: '17:00', isAvailable: true },
          { dayOfWeek: 4, startTime: '09:00', endTime: '17:00', isAvailable: true },
          { dayOfWeek: 5, startTime: '09:00', endTime: '16:00', isAvailable: true }
        ],
        bufferMinutes: Math.floor(Math.random() * 10) + 10,
        timezone: 'Europe/Madrid',
        assignedRooms: [createdRooms[Math.floor(Math.random() * 2)]._id, createdRooms[2]._id], // Random physical room + virtual room
        defaultRoom: createdRooms[Math.floor(Math.random() * 2)]._id, // Random physical room as default
        vacations: [],
        settings: {
          allowOnlineBooking: Math.random() > 0.5,
          requireApproval: Math.random() > 0.5,
          notificationPreferences: {
            email: true,
            sms: Math.random() > 0.5,
            push: true
          }
        },
        createdAt: new Date(),
        updatedAt: new Date()
      });
      await professional.save();
      console.log(`‚úÖ Created professional: ${prof.title} ${prof.firstName} ${prof.lastName}`);
      
      profUser.professionalId = professional._id;
      await profUser.save();
      additionalProfessionals.push(professional);
    }

    // Crear 50 pacientes adicionales con datos m√°s variados
    const additionalPatients = [];
    const firstNames = ['Carlos', 'Mar√≠a', 'Jos√©', 'Carmen', 'Antonio', 'Isabel', 'Manuel', 'Pilar', 'Francisco', 'Dolores', 'David', 'Teresa', 'Jes√∫s', 'Ana', 'Javier', 'Cristina', 'Daniel', 'Marta', 'Rafael', 'Laura', 'Fernando', 'Silvia', 'Sergio', 'Patricia', 'Alejandro', 'Beatriz', 'Pablo', 'Roc√≠o', 'Adri√°n', 'Natalia', 'Diego', 'Luc√≠a', '√Ångel', 'Rosa', 'Juan', 'In√©s', 'Miguel', 'Sof√≠a', 'Rub√©n', 'Alba', '√Ålvaro', 'Nerea', 'Marcos', 'Irene', 'Gonzalo', 'Claudia', 'V√≠ctor', 'Paula', 'Iv√°n', 'Elena'];
    const lastNames = ['Garc√≠a', 'Rodr√≠guez', 'Gonz√°lez', 'Fern√°ndez', 'L√≥pez', 'Mart√≠nez', 'S√°nchez', 'P√©rez', 'G√≥mez', 'Mart√≠n', 'Jim√©nez', 'Ruiz', 'Hern√°ndez', 'D√≠az', 'Moreno', 'Mu√±oz', '√Ålvarez', 'Romero', 'Alonso', 'Guti√©rrez', 'Navarro', 'Torres', 'Dom√≠nguez', 'V√°zquez', 'Ramos', 'Gil', 'Ram√≠rez', 'Serrano', 'Blanco', 'Su√°rez', 'Castillo', 'Ortega', 'Delgado', 'Castro', 'Vargas', 'Ortiz', 'Rubio', 'Medina', 'Soto', 'Contreras', 'Aguilar', 'Herrera', 'Mendoza', 'Guerrero', 'Rojas', 'Medina', 'Cruz', 'Flores', 'Espinoza', 'Rivera'];
    const cities = ['Madrid', 'Barcelona', 'Valencia', 'Sevilla', 'Zaragoza', 'M√°laga', 'Murcia', 'Palma', 'Las Palmas', 'Bilbao', 'Alicante', 'C√≥rdoba', 'Valladolid', 'Vigo', 'Gij√≥n', 'Hospitalet', 'Granada', 'Elche', 'Oviedo', 'Badalona'];
    const conditions = ['Ansiedad', 'Depresi√≥n', 'Estr√©s', 'Insomnio', 'Fobias', 'TOC', 'TDAH', 'Trastorno bipolar', 'Duelo', 'Trauma', 'Adicciones', 'Trastornos alimentarios', 'Autoestima', 'Habilidades sociales', 'Control de ira'];
    const occupations = ['Ingeniero', 'Profesor', 'M√©dico', 'Abogado', 'Comercial', 'Administrativo', 'Enfermero', 'Psic√≥logo', 'Contador', 'Dise√±ador', 'Arquitecto', 'Periodista', 'Chef', 'Artista', 'Mec√°nico', 'Polic√≠a', 'Bombero', 'Veterinario', 'Farmac√©utico', 'Electricista', 'Plomero', 'Traductor', 'Programador', 'Consultor', 'Vendedor'];
    const genders = ['male', 'female', 'non-binary', 'other'];
    const statuses = ['active', 'inactive', 'discharged', 'transferred'];
    const maritalStatuses = ['single', 'married', 'divorced', 'widowed', 'separated', 'domestic-partner'];
    
    // Create sample consent documents
    const consentDocuments = [];
    
    // Informed Consent Document
    const informedConsentDoc = new File({
      fileName: 'consentimiento-informado-v2.1.pdf',
      originalFileName: 'consentimiento-informado-v2.1.pdf',
      mimeType: 'application/pdf',
      fileSize: 245760, // ~240KB
      category: 'consent',
      description: 'Documento de Consentimiento Informado para Tratamiento Psicol√≥gico',
      tags: ['consentimiento', 'informado', 'tratamiento', 'psicologia'],
      uploadedBy: adminUser._id,
      permissions: {
        visibility: 'private',
        userPermissions: [],
        rolePermissions: [
          { role: 'admin', permissions: ['read', 'write', 'delete'] },
          { role: 'professional', permissions: ['read'] }
        ]
      },
      digitalSignature: {
        isSigned: false,
        signatureMethod: 'digital'
      },
      metadata: {
        documentType: 'informed_consent',
        version: '2.1',
        language: 'es',
        jurisdiction: 'Espa√±a',
        effectiveDate: new Date('2024-01-01'),
        expirationDate: new Date('2025-12-31')
      },
      createdAt: new Date(),
      updatedAt: new Date()
    });
    await informedConsentDoc.save();
    consentDocuments.push(informedConsentDoc);
    console.log('üìÑ Created consent document: Consentimiento Informado');

    // Privacy Policy Document
    const privacyPolicyDoc = new File({
      fileName: 'politica-privacidad-v1.3.pdf',
      originalFileName: 'politica-privacidad-v1.3.pdf',
      mimeType: 'application/pdf',
      fileSize: 189440, // ~185KB
      category: 'consent',
      description: 'Pol√≠tica de Privacidad y Protecci√≥n de Datos GDPR',
      tags: ['privacidad', 'gdpr', 'proteccion-datos'],
      uploadedBy: adminUser._id,
      permissions: {
        visibility: 'private',
        userPermissions: [],
        rolePermissions: [
          { role: 'admin', permissions: ['read', 'write', 'delete'] },
          { role: 'professional', permissions: ['read'] }
        ]
      },
      digitalSignature: {
        isSigned: false,
        signatureMethod: 'digital'
      },
      metadata: {
        documentType: 'privacy_policy',
        version: '1.3',
        language: 'es',
        jurisdiction: 'Espa√±a',
        effectiveDate: new Date('2024-03-01')
      },
      createdAt: new Date(),
      updatedAt: new Date()
    });
    await privacyPolicyDoc.save();
    consentDocuments.push(privacyPolicyDoc);
    console.log('üìÑ Created consent document: Pol√≠tica de Privacidad');

    // Telehealth Consent Document
    const telehealthConsentDoc = new File({
      fileName: 'consentimiento-telesalud-v1.0.pdf',
      originalFileName: 'consentimiento-telesalud-v1.0.pdf',
      mimeType: 'application/pdf',
      fileSize: 156672, // ~153KB
      category: 'consent',
      description: 'Consentimiento para Sesiones de Telesalud y Videollamadas',
      tags: ['telesalud', 'videollamada', 'online'],
      uploadedBy: adminUser._id,
      permissions: {
        visibility: 'private',
        userPermissions: [],
        rolePermissions: [
          { role: 'admin', permissions: ['read', 'write', 'delete'] },
          { role: 'professional', permissions: ['read'] }
        ]
      },
      digitalSignature: {
        isSigned: false,
        signatureMethod: 'digital'
      },
      metadata: {
        documentType: 'telehealth_consent',
        version: '1.0',
        language: 'es',
        jurisdiction: 'Espa√±a',
        effectiveDate: new Date('2024-02-01')
      },
      createdAt: new Date(),
      updatedAt: new Date()
    });
    await telehealthConsentDoc.save();
    consentDocuments.push(telehealthConsentDoc);
    console.log('üìÑ Created consent document: Consentimiento Telesalud');

    // Combinar todos los profesionales (originales + nuevos)
    const allProfessionals = [professional1, professional2, ...additionalProfessionals];

    for (let i = 0; i < 50; i++) {
      const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
      const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
      const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}${i + 3}@email.com`;
      const phone = `+34 6${String(Math.floor(Math.random() * 100000000)).padStart(8, '0')}`;
      const city = cities[Math.floor(Math.random() * cities.length)];
      const condition = conditions[Math.floor(Math.random() * conditions.length)];
      const occupation = occupations[Math.floor(Math.random() * occupations.length)];
      const birthYear = 1950 + Math.floor(Math.random() * 55); // Edades 18-74 a√±os
      const gender = genders[Math.floor(Math.random() * genders.length)];
      const status = statuses[Math.floor(Math.random() * statuses.length)];
      const maritalStatus = maritalStatuses[Math.floor(Math.random() * maritalStatuses.length)];
      const professionalId = allProfessionals[Math.floor(Math.random() * allProfessionals.length)]._id;
      
      // Calcular edad basada en fecha de nacimiento
      const dateOfBirth = new Date(birthYear, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1);
      const today = new Date();
      const age = today.getFullYear() - dateOfBirth.getFullYear() - 
        (today.getMonth() < dateOfBirth.getMonth() || 
         (today.getMonth() === dateOfBirth.getMonth() && today.getDate() < dateOfBirth.getDate()) ? 1 : 0);

      const additionalPatient = new Patient({
        personalInfo: {
          firstName: firstName,
          lastName: lastName,
          fullName: `${firstName} ${lastName}`,
          dateOfBirth: dateOfBirth,
          age: age,
          gender: gender,
          nationality: 'Espa√±ola',
          idNumber: `${String(Math.floor(Math.random() * 100000000)).padStart(8, '0')}${String.fromCharCode(65 + Math.floor(Math.random() * 26))}`,
          idType: 'dni',
          maritalStatus: maritalStatus,
          occupation: occupation,
          profilePicture: Math.random() > 0.4 ? profileImageBase64 : null  // 60% tienen foto, 40% no
        },
        contactInfo: {
          email: email,
          phone: phone,
          preferredContactMethod: ['email', 'phone', 'sms'][Math.floor(Math.random() * 3)],
          address: {
            street: `Calle ${Math.floor(Math.random() * 100) + 1}, ${Math.floor(Math.random() * 50) + 1}`,
            city: city,
            postalCode: String(Math.floor(Math.random() * 50000) + 1000).padStart(5, '0'),
            state: city,
            country: 'Espa√±a'
          }
        },
        emergencyContact: {
          name: `${firstNames[Math.floor(Math.random() * firstNames.length)]} ${lastNames[Math.floor(Math.random() * lastNames.length)]}`,
          relationship: ['Padre', 'Madre', 'Hermano', 'Hermana', 'C√≥nyuge', 'Hijo', 'Hija'][Math.floor(Math.random() * 7)],
          phone: `+34 6${String(Math.floor(Math.random() * 100000000)).padStart(8, '0')}`
        },
        clinicalInfo: {
          primaryProfessional: professionalId,
          assignedProfessionals: [professionalId],
          medicalHistory: {
            conditions: getRandomItems(MEDICAL_CONDITIONS, Math.floor(Math.random() * 3) + 1),
            medications: getRandomItems(MEDICATIONS, Math.floor(Math.random() * 2) + 1),
            allergies: getRandomItems(ALLERGIES, Math.floor(Math.random() * 2)),
            surgeries: getRandomItems(SURGERIES, Math.floor(Math.random() * 2)),
            notes: '<p>Historial m√©dico sin complicaciones relevantes. Paciente colaborativo durante la evaluaci√≥n inicial.</p>'
          },
          mentalHealthHistory: {
            diagnoses: getRandomItems(MENTAL_HEALTH_DIAGNOSES, Math.floor(Math.random() * 2) + 1),
            previousTreatments: getRandomItems(MENTAL_HEALTH_TREATMENTS, Math.floor(Math.random() * 3) + 1),
            currentStatus: Object.values(MENTAL_HEALTH_STATUS)[Math.floor(Math.random() * Object.values(MENTAL_HEALTH_STATUS).length)],
            severity: Object.values(MENTAL_HEALTH_SEVERITY)[Math.floor(Math.random() * Object.values(MENTAL_HEALTH_SEVERITY).length)],
            notes: '<p>Evoluci√≥n favorable con el tratamiento actual. Se observa mejor√≠a en el estado de √°nimo y reducci√≥n de s√≠ntomas ansiosos.</p>'
          },
          currentTreatment: {
            treatmentPlan: `<h3>Plan de Tratamiento Integral</h3>
              <p><strong>Objetivos principales:</strong></p>
              <ul>
                <li>Reducir niveles de ansiedad mediante t√©cnicas de relajaci√≥n</li>
                <li>Mejorar patrones de sue√±o y establecer rutinas saludables</li>
                <li>Fortalecer estrategias de afrontamiento</li>
                <li>Aumentar autoestima y confianza personal</li>
              </ul>
              <p><strong>Metodolog√≠a:</strong> Terapia cognitivo-conductual combinada con t√©cnicas de mindfulness</p>
              <p><strong>Duraci√≥n estimada:</strong> 6 meses con sesiones semanales</p>
              <p><strong>Evaluaci√≥n:</strong> Revisi√≥n mensual del progreso con escalas validadas</p>`,
            goals: ['Reducir ansiedad', 'Mejorar sue√±o', 'Aumentar autoestima', 'Fortalecer relaciones'],
            startDate: new Date(Date.now() - Math.floor(Math.random() * 90) * 24 * 60 * 60 * 1000),
            expectedDuration: ['3 meses', '6 meses', '1 a√±o'][Math.floor(Math.random() * 3)],
            frequency: ['weekly', 'biweekly'][Math.floor(Math.random() * 2)],
            notes: '<p>Paciente muestra excelente adherencia al tratamiento. Se recomienda continuar con el plan establecido.</p>',
            sessions: [
              {
                sessionId: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 1 week ago
                duration: 60,
                type: 'individual',
                status: 'completed',
                professionalId: allProfessionals[0]._id,
                notes: `<h3>Sesi√≥n de Evaluaci√≥n Inicial</h3>
                  <p><strong>Objetivos de la sesi√≥n:</strong></p>
                  <ul>
                    <li>Establecer rapport terap√©utico</li>
                    <li>Evaluar estado mental actual</li>
                    <li>Identificar objetivos de tratamiento</li>
                  </ul>
                  <p><strong>Observaciones:</strong> Paciente colaborativo, muestra insight sobre su situaci√≥n. Presenta s√≠ntomas de ansiedad moderada.</p>
                  <p><strong>Intervenciones:</strong> Psicoeducaci√≥n sobre ansiedad, introducci√≥n a t√©cnicas de respiraci√≥n.</p>`,
                objectives: ['Establecer rapport', 'Evaluaci√≥n inicial', 'Definir objetivos'],
                homework: '<p>Practicar ejercicios de respiraci√≥n diafragm√°tica 10 minutos diarios</p>',
                nextSessionPlan: '<p>Continuar con psicoeducaci√≥n y comenzar t√©cnicas de relajaci√≥n progresiva</p>',
                mood: {
                  before: { level: 3, description: 'Ansioso y preocupado' },
                  after: { level: 6, description: 'M√°s tranquilo y esperanzado' }
                },
                progress: {
                  rating: 7,
                  observations: 'Buena disposici√≥n al cambio, comprende los conceptos explicados'
                },
                createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
                updatedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
              },
              {
                sessionId: `session_${Date.now() + 1}_${Math.random().toString(36).substr(2, 9)}`,
                date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago
                duration: 50,
                type: 'individual',
                status: 'completed',
                professionalId: allProfessionals[0]._id,
                notes: `<h3>Sesi√≥n de Seguimiento</h3>
                  <p><strong>Revisi√≥n de tareas:</strong> Paciente complet√≥ ejercicios de respiraci√≥n con buenos resultados.</p>
                  <p><strong>Trabajo en sesi√≥n:</strong></p>
                  <ul>
                    <li>Identificaci√≥n de pensamientos autom√°ticos negativos</li>
                    <li>T√©cnicas de reestructuraci√≥n cognitiva</li>
                    <li>Pr√°ctica de relajaci√≥n muscular progresiva</li>
                  </ul>
                  <p><strong>Progreso observado:</strong> Reducci√≥n notable en s√≠ntomas de ansiedad, mejor calidad de sue√±o.</p>`,
                objectives: ['Revisar tareas', 'Reestructuraci√≥n cognitiva', 'Relajaci√≥n muscular'],
                homework: '<p>Registro de pensamientos autom√°ticos durante situaciones de estr√©s. Continuar con ejercicios de respiraci√≥n.</p>',
                nextSessionPlan: '<p>Trabajar en exposici√≥n gradual a situaciones temidas</p>',
                mood: {
                  before: { level: 5, description: 'Estable, algo ansioso' },
                  after: { level: 7, description: 'Relajado y motivado' }
                },
                progress: {
                  rating: 8,
                  observations: 'Excelente progreso, paciente muy comprometido con el proceso'
                },
                createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
                updatedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)
              }
            ]
          }
        },
        payment: {
          preferredMethod: Math.random() > 0.2 ? 'card' : 'cash',
          billingNotes: ''
        },
        preferences: {
          language: 'es',
          communicationPreferences: {
            appointmentReminders: Math.random() > 0.2,
            reminderMethods: getRandomItems(['email', 'sms', 'phone'], Math.floor(Math.random() * 2) + 1),
            newsletters: Math.random() > 0.5,
            marketingCommunications: Math.random() > 0.7,
            preferredContactTimes: Math.random() > 0.6 ? ['morning'] : ['afternoon', 'evening']
          },
          appointmentPreferences: {
            preferredTimes: getRandomItems([
              { day: 'monday', startTime: '09:00', endTime: '12:00' },
              { day: 'tuesday', startTime: '14:00', endTime: '17:00' },
              { day: 'wednesday', startTime: '10:00', endTime: '13:00' },
              { day: 'thursday', startTime: '15:00', endTime: '18:00' },
              { day: 'friday', startTime: '09:00', endTime: '11:00' }
            ], Math.floor(Math.random() * 3) + 1),
            preferredServices: [], // Will be populated after services are created
            cancellationNotice: [24, 48, 72][Math.floor(Math.random() * 3)],
            waitingListOptIn: Math.random() > 0.4,
            notes: Math.random() > 0.5 ? 'Flexibilidad en horarios de tarde' : undefined
          },
          portalAccess: {
            enabled: Math.random() > 0.2,
            lastLogin: Math.random() > 0.5 ? new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000) : undefined,
            passwordLastChanged: new Date(Date.now() - Math.floor(Math.random() * 90) * 24 * 60 * 60 * 1000),
            twoFactorEnabled: Math.random() > 0.8,
            loginNotifications: Math.random() > 0.3
          }
        },
        gdprConsent: {
          dataProcessing: {
            consented: true,
            consentDate: new Date(Date.now() - Math.floor(Math.random() * 60) * 24 * 60 * 60 * 1000),
            consentMethod: 'digital',
            consentVersion: '2.1',
            witnessedBy: professionalId,
            notes: 'Consentimiento registrado durante el proceso de registro inicial'
          },
          marketingCommunications: {
            consented: Math.random() > 0.4,
            consentDate: Math.random() > 0.4 ? new Date(Date.now() - Math.floor(Math.random() * 60) * 24 * 60 * 60 * 1000) : undefined,
            withdrawnDate: Math.random() > 0.8 ? new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000) : undefined,
            method: 'digital'
          },
          dataSharing: {
            healthcareProfessionals: true,
            emergencyContacts: true,
            researchPurposes: Math.random() > 0.7,
            consentDate: new Date(Date.now() - Math.floor(Math.random() * 60) * 24 * 60 * 60 * 1000)
          },
          rightToErasure: {
            requested: false,
            requestDate: undefined,
            processedDate: undefined,
            processedBy: undefined,
            retentionReason: undefined,
            notes: undefined
          },
          dataPortability: {
            lastExportDate: Math.random() > 0.9 ? new Date(Date.now() - Math.floor(Math.random() * 180) * 24 * 60 * 60 * 1000) : undefined,
            exportFormat: Math.random() > 0.9 ? 'JSON' : undefined,
            exportedBy: Math.random() > 0.9 ? professionalId : undefined
          }
        },
        
        // Signed Consent Documents (Global/Shared)
        signedConsentDocuments: [
          {
            documentId: informedConsentDoc._id,
            documentType: 'informed_consent',
            documentTitle: 'Consentimiento Informado para Tratamiento Psicol√≥gico',
            signedDate: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000),
            signedBy: professionalId,
            createdBy: professionalId,
            lastModifiedBy: Math.random() > 0.3 ? professionalId : adminUser._id,
            version: Math.floor(Math.random() * 3) + 1,
            signatureMethod: 'digital',
            documentVersion: '2.1',
            isActive: true,
            expirationDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 a√±o
            notes: 'Consentimiento firmado durante la primera consulta',
            metadata: {
              ipAddress: `192.168.1.${Math.floor(Math.random() * 254) + 1}`,
              userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
              location: 'Madrid, Espa√±a',
              deviceInfo: 'Desktop - Chrome'
            }
          },
          ...(Math.random() > 0.6 ? [{
            documentId: privacyPolicyDoc._id,
            documentType: 'privacy_policy',
            documentTitle: 'Pol√≠tica de Privacidad y Protecci√≥n de Datos',
            signedDate: new Date(Date.now() - Math.floor(Math.random() * 20) * 24 * 60 * 60 * 1000),
            signedBy: professionalId,
            signatureMethod: 'digital',
            documentVersion: '1.3',
            isActive: true,
            notes: 'Aceptaci√≥n de pol√≠tica de privacidad actualizada'
          }] : []),
          ...(Math.random() > 0.8 ? [{
            documentId: telehealthConsentDoc._id,
            documentType: 'telehealth_consent',
            documentTitle: 'Consentimiento para Sesiones de Telesalud',
            signedDate: new Date(Date.now() - Math.floor(Math.random() * 15) * 24 * 60 * 60 * 1000),
            signedBy: professionalId,
            signatureMethod: 'digital',
            documentVersion: '1.0',
            isActive: true,
            notes: 'Autorizaci√≥n para sesiones virtuales por videollamada'
          }] : [])
        ],
        tags: Math.random() > 0.3 ? [{
          name: ['VIP', 'Seguimiento especial', 'Primera consulta', 'Urgente', 'Derivado'][Math.floor(Math.random() * 5)],
          category: ['clinical', 'administrative', 'billing'][Math.floor(Math.random() * 3)],
          color: ['#ef4444', '#f97316', '#eab308', '#22c55e', '#3b82f6', '#8b5cf6'][Math.floor(Math.random() * 6)],
          addedBy: professionalId,
          addedDate: new Date()
        }] : [],
        status: status,
        relationships: [],
        referral: {
          source: ['self', 'physician', 'family', 'friend', 'online'][Math.floor(Math.random() * 5)],
          referralDate: new Date(2024, Math.floor(Math.random() * 6), Math.floor(Math.random() * 28) + 1),
          referralReason: `Necesidad de tratamiento para ${condition.toLowerCase()}`
        },
        administrativeNotes: Math.random() > 0.5 ? [{
          noteId: `NOTE-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          content: `<h4>Nota Administrativa</h4><p><strong>Fecha:</strong> ${new Date().toLocaleDateString('es-ES')}</p><p><strong>Observaciones:</strong></p><ul><li>Paciente puntual en las citas</li><li>Comunicaci√≥n fluida con el equipo</li><li>Cumple con los protocolos establecidos</li></ul><p><em>Nota registrada por el equipo administrativo</em></p>`,
          category: 'general',
          isPrivate: false,
          addedBy: professionalId,
          addedDate: new Date(),
          lastModified: new Date(),
          lastModifiedBy: professionalId
        }] : [],
        statistics: {
          totalAppointments: 0,
          completedAppointments: 0,
          cancelledAppointments: 0,
          noShowAppointments: 0,
          firstAppointmentDate: null,
          lastAppointmentDate: null,
          totalInvoiceAmount: 0,
          totalPaidAmount: 0,
          averageSessionRating: 0
        },
        createdBy: adminUser._id,
        lastModifiedBy: Math.random() > 0.5 ? adminUser._id : professionalId,
        version: Math.floor(Math.random() * 3) + 1,
        createdAt: new Date(Date.now() - Math.floor(Math.random() * 90) * 24 * 60 * 60 * 1000),
        updatedAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000)
      });
      
      await additionalPatient.save();
      additionalPatients.push(additionalPatient);
      console.log(`‚úÖ Created additional patient: ${firstName} ${lastName}`);
    }

    // Crear citas hist√≥ricas para algunos pacientes (no todos)
    const allPatients = [...additionalPatients];
    const allServices = await Service.find({});
    const allRooms = await Room.find({});
    const professionals = [professional1, professional2];
    
    const appointmentStatuses = ['completed', 'completed', 'completed', 'cancelled', 'no_show'];
    const sessionTypes = ['initial', 'follow_up', 'follow_up', 'follow_up', 'assessment'];
    const professionalNotes = [
      'Paciente muestra progreso significativo en el manejo de la ansiedad. Continuar con t√©cnicas de respiraci√≥n.',
      'Sesi√≥n productiva. Paciente ha implementado estrategias de afrontamiento discutidas en sesiones anteriores.',
      'Evaluaci√≥n inicial completada. Recomendado plan de tratamiento de 12 sesiones.',
      'Paciente reporta mejora en patrones de sue√±o. Ajustar frecuencia de sesiones.',
      'Sesi√≥n enfocada en t√©cnicas de mindfulness. Paciente receptivo a nuevas estrategias.',
      'Revisi√≥n de objetivos terap√©uticos. Paciente ha alcanzado metas intermedias.',
      'Sesi√≥n de seguimiento. Mantener estrategias actuales, paciente estable.',
      'Trabajo en habilidades sociales. Paciente muestra mayor confianza.',
      'Sesi√≥n de crisis manejada exitosamente. Paciente en estado estable.',
      'Evaluaci√≥n de progreso trimestral. Resultados positivos en todas las √°reas.'
    ];

    const createdAppointments = [];
    
    // Crear citas para todos los pacientes
    const patientsWithHistory = allPatients;
    
    // Actualizar referencias de profesionales (usar allProfessionals ya definido)
    
    for (const patient of patientsWithHistory) {
      const numAppointments = Math.floor(Math.random() * 8) + 1; // 1-8 citas por paciente
      const assignedProfessional = patient.clinicalInfo.assignedProfessionals[0];
      const professional = allProfessionals.find(p => p._id.equals(assignedProfessional));
      
      if (!professional) continue;

      for (let i = 0; i < numAppointments; i++) {
        // Generar fechas en los √∫ltimos 6 meses
        const daysAgo = Math.floor(Math.random() * 180) + 7; // 7-187 d√≠as atr√°s
        const appointmentDate = new Date();
        appointmentDate.setDate(appointmentDate.getDate() - daysAgo);
        appointmentDate.setHours(9 + Math.floor(Math.random() * 8), 0, 0, 0); // 9:00-17:00
        
        const service = allServices[Math.floor(Math.random() * allServices.length)];
        const room = allRooms[Math.floor(Math.random() * (allRooms.length - 1))]; // Excluir sala virtual
        const status = appointmentStatuses[Math.floor(Math.random() * appointmentStatuses.length)];
        const sessionType = i === 0 ? 'initial' : sessionTypes[Math.floor(Math.random() * sessionTypes.length)];
        
        const endTime = new Date(appointmentDate);
        endTime.setMinutes(appointmentDate.getMinutes() + service.duration);
        
        const basePrice = service.price;
        const totalAmount = basePrice;

        const appointment = new Appointment({
          patientId: patient._id,
          professionalId: professional._id,
          serviceId: service._id,
          roomId: room._id,
          startTime: appointmentDate,
          endTime: endTime,
          duration: service.duration,
          timezone: 'Europe/Madrid',
          status: status,
          paymentStatus: status === 'completed' ? 'paid' : (status === 'cancelled' ? 'refunded' : 'pending'),
          source: ['admin', 'professional', 'public_booking'][Math.floor(Math.random() * 3)],
          bookingMethod: ['online', 'phone', 'in_person'][Math.floor(Math.random() * 3)],
          
          pricing: {
            basePrice: basePrice,
            discountAmount: 0,
            totalAmount: totalAmount,
            currency: 'EUR'
          },
          
          patientInfo: {
            name: `${patient.personalInfo.firstName} ${patient.personalInfo.lastName}`,
            email: patient.contactInfo.email,
            phone: patient.contactInfo.phone,
            dateOfBirth: patient.personalInfo.dateOfBirth,
            emergencyContact: patient.emergencyContact ? {
              name: patient.emergencyContact.name,
              phone: patient.emergencyContact.phone,
              relationship: patient.emergencyContact.relationship
            } : undefined
          },
          
          notes: status === 'completed' ? {
            professionalNotes: professionalNotes[Math.floor(Math.random() * professionalNotes.length)],
            patientNotes: Math.random() > 0.7 ? 'Me siento mejor despu√©s de la sesi√≥n' : undefined
          } : (status === 'cancelled' ? {
            cancellationReason: ['Enfermedad', 'Conflicto de horario', 'Emergencia familiar'][Math.floor(Math.random() * 3)]
          } : undefined),
          
          forms: {
            intakeCompleted: i === 0 ? true : false,
            preSessionCompleted: Math.random() > 0.3,
            postSessionCompleted: status === 'completed' ? Math.random() > 0.5 : false
          },
          
          reminders: {
            sms: { sent: true, sentAt: new Date(appointmentDate.getTime() - 24 * 60 * 60 * 1000) },
            email: { sent: true, sentAt: new Date(appointmentDate.getTime() - 24 * 60 * 60 * 1000) },
            push: { sent: false }
          },
          
          attendance: status === 'completed' ? {
            patientArrived: true,
            patientArrivedAt: new Date(appointmentDate.getTime() - 5 * 60 * 1000),
            professionalPresent: true,
            sessionStarted: true,
            sessionStartedAt: appointmentDate,
            sessionEnded: true,
            sessionEndedAt: endTime,
            actualDuration: service.duration + Math.floor(Math.random() * 10) - 5 // ¬±5 minutos
          } : (status === 'no_show' ? {
            patientArrived: false,
            professionalPresent: true,
            sessionStarted: false,
            sessionEnded: false
          } : {}),
          
          followUp: status === 'completed' && Math.random() > 0.5 ? {
            recommendedFrequency: ['weekly', 'biweekly', 'monthly'][Math.floor(Math.random() * 3)],
            homeworkAssigned: Math.random() > 0.6 ? 'Practicar t√©cnicas de respiraci√≥n diariamente' : undefined
          } : undefined,
          
          feedback: status === 'completed' && Math.random() > 0.4 ? {
            patientRating: Math.floor(Math.random() * 2) + 4, // 4-5 estrellas
            overallSatisfaction: Math.floor(Math.random() * 2) + 4,
            patientComment: Math.random() > 0.7 ? 'Muy satisfecho con la sesi√≥n' : undefined
          } : undefined,
          
          compliance: {
            consentSigned: true,
            consentSignedAt: i === 0 ? appointmentDate : undefined,
            hipaaCompliant: true,
            documentationComplete: status === 'completed',
            billingCoded: status === 'completed'
          },
          
          metadata: {
            sessionType: sessionType,
            treatmentPlan: i === 0 ? `Plan de tratamiento para ${patient.clinicalInfo.medicalHistory.conditions[0]}` : undefined,
            referralSource: i === 0 ? ['M√©dico de cabecera', 'Autoremisi√≥n', 'Familiar', 'Internet'][Math.floor(Math.random() * 4)] : undefined
          },
          
          attachments: []
        });
        
        // Manejar cancelaciones
        if (status === 'cancelled') {
          appointment.cancellation = {
            cancelledBy: Math.random() > 0.5 ? patient.userId : professional.userId,
            cancelledAt: new Date(appointmentDate.getTime() - 2 * 60 * 60 * 1000),
            reason: appointment.notes?.cancellationReason || 'Motivos personales',
            refundAmount: totalAmount,
            refundProcessed: true,
            rescheduleOffered: true
          };
        }
        
        await appointment.save();
        createdAppointments.push(appointment);
      }
      
      console.log(`üìÖ Created ${numAppointments} appointments for ${patient.personalInfo.firstName} ${patient.personalInfo.lastName}`);
    }

    // Actualizar estad√≠sticas de pacientes basadas en citas reales
    for (const patient of patientsWithHistory) {
      const patientAppointments = createdAppointments.filter(apt => apt.patientId.equals(patient._id));
      
      const sortedAppointments = patientAppointments.sort((a, b) => new Date(a.startTime) - new Date(b.startTime));
      
      const stats = {
        totalAppointments: patientAppointments.length,
        completedAppointments: patientAppointments.filter(apt => apt.status === 'completed').length,
        cancelledAppointments: patientAppointments.filter(apt => apt.status === 'cancelled').length,
        noShowAppointments: patientAppointments.filter(apt => apt.status === 'no_show').length,
        firstAppointmentDate: sortedAppointments.length > 0 ? sortedAppointments[0].startTime : null,
        lastAppointmentDate: sortedAppointments.length > 0 ? sortedAppointments[sortedAppointments.length - 1].startTime : null,
        totalInvoiceAmount: patientAppointments
          .reduce((sum, apt) => sum + apt.pricing.totalAmount, 0),
        totalPaidAmount: patientAppointments
          .filter(apt => apt.paymentStatus === 'paid')
          .reduce((sum, apt) => sum + apt.pricing.totalAmount, 0),
        averageSessionRating: patientAppointments.length > 0 
          ? Math.round((Math.random() * 2 + 3) * 10) / 10 // 3.0-5.0 
          : 0
      };
      
      await Patient.findByIdAndUpdate(patient._id, { statistics: stats });
    }

    console.log('\nüéâ SEED DATA CREATED SUCCESSFULLY!');
    console.log(`üë• Professionals: ${2 + additionalProfessionals.length}`);
    console.log(`üè• Patients: ${2 + additionalPatients.length}`);
    console.log('üíº Services: 3');
    console.log('üè¢ Rooms: 3');
    console.log(`üìÖ Appointments: ${createdAppointments.length}`);
    console.log(`üë• Patients with history: ${patientsWithHistory.length}`);
    
    console.log('\nüîê TEST CREDENTIALS:');
    console.log('üë§ Admin: admin@arribapsicologia.com / SecureAdmin2024!');
    console.log('üë®‚Äç‚öïÔ∏è Professional 1: maria.garcia@arribapsicologia.com / Professional2024!');
    console.log('üë®‚Äç‚öïÔ∏è Professional 2: carlos.rodriguez@arribapsicologia.com / Professional2024!');
    console.log('üè• Patient 1: ana.martinez@email.com / Patient2024!');
    console.log('üè• Patient 2: miguel.fernandez@email.com / Patient2024!');
    console.log(`üè• Additional Patients: ${additionalPatients.length} patients created with various test data`);

  } catch (error) {
    console.error('‚ùå Seeding error:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã Disconnected from MongoDB');
    process.exit(0);
  }
}

seedData();
